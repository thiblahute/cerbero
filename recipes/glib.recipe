# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

GLIB_CONFIG_UNVERSAL='''\
#ifdef __i386__
#include "i386/glibconfig.h"
#elif defined(__ppc__)
#include "ppc/glibconfig.h"
#elif defined(__x86_64__)
#include "x86_64/glibconfig.h"
#else
#error "Unsupported Architecture"
#endif
'''

class Recipe(recipe.Recipe):
    name = 'glib'
    version = '2.34.2'
    licenses = [License.LGPLv2Plus]
    configure_sh = 'sh autogen.sh'
    configure_options = ' --enable-static'
    deps = ['libffi', 'zlib']
    can_use_configure_cache = False
    platform_deps = {Platform.WINDOWS: ['libiconv', 'gettext'],
                     Platform.DARWIN: ['libiconv', 'gettext'],
                     Platform.IOS: ['libiconv', 'gettext'],
                     Platform.ANDROID: ['libiconv', 'gettext']}

    files_libs = [
        'libglib-2.0', 'libgio-2.0', 'libgmodule-2.0', 'libgobject-2.0',
        'libgthread-2.0']
    files_bins = ['gsettings', 'gdbus', 'gio-querymodules', 'glib-compile-schemas']
    platform_files_schemas = {
        Platform.WINDOWS: ['share/glib-2.0/schemas'],
        Platform.DARWIN: ['share/glib-2.0/schemas'],
        Platform.IOS: ['share/glib-2.0/schemas'],
    }
    #FIXME: Fill it when needed
    #files_gio = ['lib/gio/modules']
    files_devel = [
        'bin/glib-gettextize',
        'bin/glib-mkenums',
        'bin/glib-compile-resources%(bext)s',
        'bin/glib-genmarshal%(bext)s',
        'bin/gresource%(bext)s',
        'lib/glib-2.0/include',
        'lib/pkgconfig/gio-2.0.pc',
        'lib/pkgconfig/glib-2.0.pc',
        'lib/pkgconfig/gmodule-2.0.pc',
        'lib/pkgconfig/gmodule-export-2.0.pc',
        'lib/pkgconfig/gmodule-no-export-2.0.pc',
        'lib/pkgconfig/gobject-2.0.pc',
        'lib/pkgconfig/gthread-2.0.pc',
        'include/glib-2.0',
        'share/aclocal/glib-2.0.m4'
        ]
    platform_files_devel = {
        Platform.WINDOWS: ['lib/pkgconfig/gio-windows-2.0.pc', 'include/gio-win32-2.0'],
        Platform.LINUX: ['lib/pkgconfig/gio-unix-2.0.pc', 'include/gio-unix-2.0'],
        Platform.DARWIN: ['lib/pkgconfig/gio-unix-2.0.pc', 'include/gio-unix-2.0'],
        Platform.IOS: ['lib/pkgconfig/gio-unix-2.0.pc', 'include/gio-unix-2.0'],
    }

    files_lang = ['glib20']

    def _gio_flags(self, path1=None, path2=None, use_old_uri_scheme=False):
        flags = ''
        def escape(path):
            return '\\\\\\\"%s\\\\\\\"' % path
        if path1 is not None:
            flags += ' -DGST_SDK_GLIB_GIO_DISTRO_GIO_MODULE_PATH=%s' % escape(path1)
        if path2 is not None:
            flags += ' -DGST_SDK_GLIB_GIO_DISTRO_GIO_MODULE_PATH2=%s' % escape(path2)
        if use_old_uri_scheme:
            flags += ' -DGST_SDK_GLIB_GIO_OLD_URI_SCHEME_HANDLERS=1'
        return flags

    def prepare(self):
        if self.config.target_platform == Platform.ANDROID:
            # Hack to fix building of the glib/tests/private test
            self.make = '%s private_LDFLAGS=""' % self.make
        elif self.config.target_platform == Platform.WINDOWS:
            self.configure_options = '--with-libiconv=gnu'
        elif self.config.target_platform in [Platform.DARWIN, Platform.IOS]:
            arch = self.config.target_arch
            if arch == Architecture.X86:
                arch = 'i386'
            self.files_devel.append(os.path.join('lib', 'glib-2.0', 'include', arch, 'glibconfig.h'))
            self.config_sh = 'CFLAGS="$CFLAGS -DHAVE_STRNDUP" ./configure'
            if self.config.target_platform == Platform.IOS:
                self.autoreconf = True
                # Disable mac OS X specifics
                self.configure_options += ' --disable-carbon --enable-dtrace=no --disable-modular-tests --disable-cocoa'
        elif self.config.target_platform == Platform.LINUX:
            if self.config.target_distro == Distro.DEBIAN and self.config.target_distro_version in [DistroVersion.DEBIAN_SQUEEZE, DistroVersion.UBUNTU_LUCID, DistroVersion.UBUNTU_MAVERICK]:
                self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules/', None, True)
            elif self.config.target_distro == Distro.DEBIAN and self.config.target_distro_version in [DistroVersion.UBUNTU_NATTY, DistroVersion.UBUNTU_ONEIRIC, DistroVersion.UBUNTU_PRECISE, DistroVersion.UBUNTU_QUANTAL]:
                if self.config.target_arch == Architecture.X86:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules/', '/usr/lib/i386-linux-gnu/gio/modules')
                elif self.config.target_arch == Architecture.X86_64:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules/', '/usr/lib/x86_64-linux-gnu/gio/modules')
            elif self.config.target_distro == Distro.DEBIAN and self.config.target_distro_version in [DistroVersion.DEBIAN_WHEEZY]:
                if self.config.target_arch == Architecture.X86:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/i386-linux-gnu/gio/modules')
                elif self.config.target_arch == Architecture.X86_64:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/x86_64-linux-gnu/gio/modules')
            elif self.config.target_distro == Distro.REDHAT:
                if self.config.target_distro_version in [DistroVersion.FEDORA_16, DistroVersion.FEDORA_17]:
                    if self.config.target_arch == Architecture.X86:
                        self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules')
                    elif self.config.target_arch == Architecture.X86_64:
                        self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib64/gio/modules/')
                else:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules/')
            elif self.config.target_distro == Distro.SUSE:
                if self.config.target_arch == Architecture.X86:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib/gio/modules')
                elif self.config.target_arch == Architecture.X86_64:
                    self.config_sh = 'CFLAGS="%s" ./configure' % self._gio_flags('/usr/lib64/gio/modules')
            else:
                from cerbero.errors import FatalError
                raise FatalError(_("Add specific for other Linux distributions here"))

    def configure(self):
        if self.config.target_platform == Platform.IOS:
            # Use a cache file specific to the GLib to make cross compilation possible
            cache = os.path.join(self.build_dir, ".glib.configure.cache")
            if not os.path.exists(cache):
                writer = open(cache, 'w')
                writer.write("glib_cv_stack_grows=no\n"
                             "glib_cv_uscore=yes\n"
                             "ac_cv_func_posix_getpwuid_r=yes\n"
                             "ac_cv_func_posix_getgrgid_r=yes\n"
                             "gt_cv_c_wchar_t=no")
                writer.close()
            self.configure_options += ' --cache-file=%s' % cache
        super(recipe.Recipe, self).configure()

    def post_install(self):
        import shutil
        if self.config.target_platform == Platform.WINDOWS:
            shutil.copy(os.path.join(self.build_dir, 'glib', 'glibconfig.h.win32'),
                        os.path.join(self.config.prefix, 'lib', 'glib-2.0',
                                     'include', 'glibconfig.h'))
        if self.config.target_platform == Platform.DARWIN:
            # For the universal build we need to ship glibconfig.h of both
            # architectures ina subfolder and include the correct one depending
            # on the compiler architecture
            arch = self.config.target_arch
            if arch == Architecture.X86:
                arch = 'i386'

            arch_dir = os.path.join(self.config.prefix, 'lib', 'glib-2.0',
                                     'include', arch)
            if not os.path.exists(arch_dir):
                os.makedirs(arch_dir)
            shutil.copyfile(os.path.join(self.build_dir, 'glib', 'glibconfig.h'),
                        os.path.join(arch_dir, 'glibconfig.h'))
            with open(os.path.join(self.config.prefix, 'lib', 'glib-2.0',
                                   'include', 'glibconfig.h'), 'w+') as f:
                f.write(GLIB_CONFIG_UNVERSAL)
